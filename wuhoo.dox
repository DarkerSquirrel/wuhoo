/*! \mainpage
 *
 * \section intro_sec Introduction
 *
 * Wuhoo aims to make it easy to setup a system-backed drawing canvas on the three most popular windowing APIs, namely Win32, X11 and Cocoa. If requested, the API can also handle the creation of a modern OpenGL context for the user. 
 *
 * \section install_sec Installation / Usage
 *
 * Wuhoo is a single header library. In a single implemetation file, you `#define WUHOO_IMPLEMENTATION` and `#include wuhoo.h`.
 *
 * \subsection windows_subsec Windows (Win32 API)
 * Windows API functions that manipulate characters generally provide two versions,
 *   - A Windows code page version with the letter "A" used to indicate "ANSI".
 *   - A Unicode version with the letter "W" used to indicate "wide".
 *
 * In <b>Wuhoo</b> you define <b>WUHOO_UNICODE</b> or simply <b>UNICODE</b> to indicate which version should be used internally. <b>UNICODE</b> might already by defined depending on your compilation settings. In general Wuhoo uses UTF-8 encoding for all string-relevant APIs and handles any required conversion internally.
 * \subsection x11_subsec Linux (X11 API)
 * When using the X11 backend on Linux, the user has to link
 * with the X11 library (-lX11). If an OpenGL context has been requested, the OpenGL library is also required (-lGL)
 * 
 * Depending on your package manager, you will at least need something like this:
 *
 * `sudo apt-get install libx11-dev`
 *
 * \subsection mac_subsec Mac OS X (Cocoa API)
 * When using the Cocoa backend on Mac OS X the user has to link with the following frameworks (<b>-framework Cocoa, Carbon, Quartz</b>). If an OpenGL context has been requested, the OpenGL framework is also required (<b>-framework OpenGL</b>)
 *
 * \section example_sec Examples
 * To quickly get up and running with Wuhoo, check out the provided examples.\n\n
 * For convenience, a **cmake** build script is provided. Simply change directory to `wuhoo/examples` and execute 
 *
 * `cmake -D"CMAKE_BUILD_TYPE=Release" -H. -Bbuild` 
 *
 * or with newer `cmake` (>3.13)
 *
 * `cmake -D"CMAKE_BUILD_TYPE=Release" -S. -Bbuild` 
 *
 * <b>Canvas</b> is a very basic example that allows the user to free draw with the mouse on a system provided buffer. It showcases window setup along with basic window and mouse event handling.\n\n
 * <b>Mandelbrot</b> and <b>Mandelbrot GL</b> draw the famous fractal using a system buffer and an OpenGL context respectively.\n\n
 * <div style="display:flex; justify-content: center">   
 *     <img style="padding: 10px" src="images/x11_mandelbrot.png" width="512"/>
 *     <img style="padding: 10px" src="images/cocoa_mandelbrot.png" width="512"/>
 * </div>
 * <div style="display:flex; justify-content: center">   
 *     <img style="padding: 10px" src="images/win32_mandelbrot.png" width="526"/>                             
 *     <img style="padding: 10px" src="images/x11_pi_mandelbrot.png" width="512"/>-->
 * </div>
 * 
 * <b>Text</b> uses another single header library(stb_truetype) to create a very basic text editor. The main focus is on showcasing how character encoding and keyboard events are handled with Wuhoo.\n\n
 * <b>Image Viewer</b> uses stb_image and stb_image_resize to create a basic image previewer. The main focus is on presenting the Drag n Drop event handling. Simply darg an image on the window to present it.\n\n
 * <b>RTIOW</b> is a C++ project that implements a multi-threaded version of the amazing Ray Tracing in One Weekend book. Expect something like this:\n\n 
 * <div style="display:flex; justify-content: center">   
 *     <img style="padding: 10px" src="images/rtiow_run.gif" width="512"/>                             
 * </div>
 *
 * <div style="display:flex; justify-content: center">   
 *     <img style="padding: 10px" src="images/x11_rtiow.png" width="512"/>
 *     <img style="padding: 10px" src="images/cocoa_rtiow_crop.png" width="512"/>
 * </div>
 * <div style="display:flex; justify-content: center">   
 *     <img style="padding: 10px" src="images/win32_rtiow.png" width="526"/>                             
 *     <img style="padding: 10px" src="images/x11_pi_rtiow.png" width="512"/>                             
 * </div>
 *
 */


